GibbsSamplerLogit <- function(X, Y, Z_u, Z_v, nburn, nsim, nthin, a = 0.1, b = 0.1, beta.init, u.init, v.init, sigma_u2.init, sigma_v2.init) {
  N <- length(Y)
  p <- dim(X)[2]
  n_u <- ncol(Z_u)
  n_v <- ncol(Z_v)
  
  
  # Initialize parameters
  Mu <- rep(0, N)  # Initialize theta with zeros
  Beta <- rep(1, p)  # Initialize beta as a column vector
  Sigma2_U <- 1
  Sigma2_V <- 1
  U <- rep(1, n_u)
  V <- rep(1, n_v)
  
  inv_sigma_u <- Diagonal(n_u)
  inv_sigma_v <- Diagonal(n_v)
  
  # Storage for parameters
  Beta.chain <- array(0, dim = c(p, nsim / nthin))
  Sigma2_u.chain <- rep(0, nsim / nthin)
  Sigma2_v.chain <- rep(0, nsim / nthin)
  U.chain <- array(0, dim = c(n_u, nsim / nthin))
  V.chain <- array(0, dim = c(n_v, nsim / nthin))
  Mu.chain <- array(0, dim = c(N, nsim / nthin))
  
  
  for (index in 1:(nsim + nburn)) {
    if (index %% 10000 == 0) cat(index, "\n")
    # Update latent variable w
    w <- rpg(N, 1, Mu)
    Omega <- Diagonal(x=w)
    UO <- t(Z_u) %*% Omega
    OU <- UO %*% Z_u
    VO <- t(Z_v) %*% Omega
    OV <- VO %*% Z_v
    
    # Update Sigma_2_u
    a_prime_u <- a + n_u / 2
    b_prime_u <- b + 0.5 * t(U) %*% U
    Sigma2_u <- 1 / rgamma(1, shape = a_prime_u, rate = b_prime_u) 
    
    # Update Sigma_2_v
    a_prime_v <- a + n_v / 2
    b_prime_v <- b + 0.5 * t(V) %*% V
    Sigma2_v <- 1 / rgamma(1, shape = a_prime_v, rate = b_prime_v)
    
    # Update Beta
    var.Beta <- solve(t(X) %*% Omega %*% X + 0.001 * Diagonal(p))
    mean.Beta <- var.Beta %*% (t(X) %*% Omega %*% ((Y - 1/2)/w - Z_u %*% U - Z_v %*% V))
    Beta <- as.vector(mvrnorm(1, mu = mean.Beta, Sigma = var.Beta))
    
    # Update U
    var.U <- solve(OU  + inv_sigma_u/Sigma2_u)
    mean.U <- var.U %*% (UO %*%((Y - 1/2)/w - X %*% Beta - Z_v %*% V))
    #U <- as.vector(rmvn(1, as.vector(mean.U), var.U))
    U <- as.vector(mvrnorm(1, mu = mean.U, Sigma = var.U))
    # Update V
    var.V <- solve(OV  + inv_sigma_v/Sigma2_v)
    mean.V <- var.V %*% (VO %*%((Y - 1/2)/w - X %*% Beta - Z_u %*% U))
    #V <- as.vector(rmvn(1, as.vector(mean.V), var.V))
    V <- as.vector(mvrnorm(1, mu = mean.V, Sigma = var.V))
    # Update mu
    Mu <- as.vector(X %*% Beta + Z_u %*% U + Z_v %*% V)
    
    if (index > nburn && (index - nburn) %% nthin == 0) {
      Beta.chain[, (index - nburn) / nthin] <- Beta
      U.chain[, (index - nburn) / nthin] <- U
      V.chain[, (index - nburn) / nthin] <- V
      Sigma2_u.chain[(index - nburn) / nthin] <- Sigma2_u
      Sigma2_v.chain[(index - nburn) / nthin] <- Sigma2_v
      Mu.chain[,(index-nburn)/nthin] <- Mu
    }
  }
  
  list(Beta.chain = Beta.chain, U.chain = U.chain, Sigma2_u.chain = Sigma2_u.chain, Mu.chain = Mu.chain, V.chain = V.chain, Sigma2_v.chain = Sigma2_v.chain)
}
